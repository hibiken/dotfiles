set nocompatible              " be iMproved, required
filetype off                  " required

" === Plugins ===
" Automatic installation of vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'airblade/vim-gitgutter'
Plug 'jiangmiao/auto-pairs'
Plug 'christoomey/vim-tmux-navigator'
Plug 'morhetz/gruvbox'
Plug 'rhysd/vim-clang-format'
Plug 'ycm-core/YouCompleteMe'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
call plug#end()

"=== Add Packages ===
packadd! matchit " :help matchit for more info

syntax enable

" === Leader Key ===
let mapleader = "\<Space>"
nmap <leader>vr :tabe $MYVIMRC<cr>
nmap <silent> <leader>h :nohlsearch<cr>
nmap <leader>s :source $MYVIMRC<cr>
nmap <silent> <leader>o :FzfFiles<cr>
nmap <silent> <leader>O :FzfFiles!<cr>
nmap <silent> <leader>gs :FzfGFiles!?<cr>

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>r :GoRun<cr>
autocmd FileType go nmap <leader>t :GoTestFunc<cr>
autocmd FileType go nmap <leader>c :GoCoverageToggle<cr>

" No mapping from vim-gitgutter
let g:gitgutter_map_keys = 0
nmap <leader>g :GitGutter<CR>

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set noerrorbells  " No beeps"
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=200
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set hlsearch      " enable highlight searching
set ignorecase    " Case insensitive pattern matching
set smartcase     " Overrides ignorecase if pattern contain upcase
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands
set autoread
set number
set numberwidth=5
set pumheight=8   "Show at most 8 suggestions in popup

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  autocmd Filetype gitcommit setlocal spell textwidth=72
augroup END

" === Cursor ===
"Change cursor shape in different mode
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

" vim-gitgutter config
let g:gitgutter_max_signs = 500
set updatetime=250

" Default indentation: 4 spaces
set ts=4 sts=4 sw=4 expandtab

augroup filetypedetect
  command! -nargs=* -complete=help Help vertical belowright help <args>
  autocmd FileType help wincmd L

  autocmd BufNewFile,BufRead .tmux.conf*,tmux.conf* setf tmux
  autocmd BufNewFile,BufRead .nginx.conf*,nginx.conf* setf nginx
  autocmd BufNewFile,BufRead *.hcl setf conf
  autocmd BufNewFile,BufRead *.ino setlocal ts=4 sw=4 sts=4 noexpandtab
  autocmd BufNewFile,BufRead *.txt setlocal ts=4 sw=4 sts=4 noexpandtab
  autocmd BufNewFile,BufRead *.md setlocal ts=4 sw=4 sts=4 noexpandtab
  autocmd BufNewFile,BufRead *.html setlocal ts=4 sw=4 sts=4 noexpandtab
  autocmd BufNewFile,BufRead *.vim setlocal ts=2 sts=2 sw=2 expandtab
  autocmd BufNewFile,BufRead *.hcl setlocal ts=2 sts=2 sw=2 expandtab
  autocmd BufNewFile,BufRead *.sh setlocal ts=2 sts=2 sw=2 expandtab
  autocmd BufNewFile,BufRead *.proto setlocal ts=2 sts=2 sw=2 expandtab
  autocmd BufNewFile,BufRead *.jsx setlocal ts=2 sts=2 sw=2 expandtab

  autocmd FileType json setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType sql setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType java setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType go setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType cpp setlocal ts=2 sts=2 sw=2 noexpandtab
  autocmd Filetype javascript setlocal ts=2 sts=2 sw=2 expandtab
augroup END

" Use one space, not two, after punctuation.
set nojoinspaces

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
endif


" ===SEARCH===
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" map \ to :Ag
nnoremap \ :Ag<SPACE>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

"Color Scheme"
syntax enable
set t_Co=256
set background=dark
let g:rehash256 = 1
colorscheme gruvbox
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0

" Ex command autocompletion menu.
set wildmenu
set wildmode=full

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" fzf config
let g:fzf_command_prefix = 'Fzf'
let $FZF_DEFAULT_COMMAND = 'fd --type f'

" vim-go config
" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"
let g:go_def_mode='godef'
let g:go_info_mode='gopls'

" clang-format config
autocmd FileType c,cpp nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
" let g:clang_format#code_style="google"
let g:clang_format#style_options = {
  \ "AccessModifierOffset" : -4,
  \ "AllowShortIfStatementsOnASingleLine" : "true",
  \ "AlwaysBreakTemplateDeclarations" : "true",
  \ "Standard" : "C++11"}

" Tip #42 from 'Practical Vim'
" Type '%%' to expand to the path of the acitive buffer. 
" Example:
"     :e %%
"     :sp %%
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

filetype plugin indent on    " required
